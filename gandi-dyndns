#!/usr/bin/env python
#
# gandi-dyndns - Dynamic DNS script for Gandi.net users
#
# Copyright (C) 2012 Adam Sutton <dev@adamsutton.me.uk>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#

#
# Imports
#

import os, sys, re
import json
import time
import xmlrpclib, httplib, urllib, urllib2
from optparse import OptionParser

class Logger:
    _logger = None

    def __init__ ( self, quiet ):
        self._quiet = quiet

        Logger._logger = self

    def info( self, msg ):
        if not self._quiet:
            print( 'INFO: '+msg )

    def warn( self, msg ):
        if not self._quiet:
            #print >> sys.stderr, ('WARN: '+msg)
            print( 'INFO: '+msg )

    def error( self, msg ):
        print >> sys.stderr, ('ERROR: '+msg)
        sys.exit(1)

    @staticmethod
    def get():
        if Logger._logger is None:
            logger = Logger()
        else:
            logger = Logger._logger

        return logger

#
# Api wrapper
#
class GandiAPI:

    # Setup
    def __init__ ( self, key, domain, cache ):
        self._rpc = xmlrpclib.ServerProxy('https://rpc.gandi.net/xmlrpc/')
        self._key = key
        self._domain = domain
        self._zoneid = None
        self._zonever = None
        self._cache = cache
        self._logger = Logger.get()

        logger = self._logger

        if cache.is_empty():
            # Check key/domain
            if not self.apikey_check():
                logger.error('apikey specified ['+key+'] was invalid')

            #if not self.domain_check():
            #    print 'ERROR: domain specified [%s] was invalid' % domain
            #    sys.exit(1)

        try:
            di = self.domain_info()
            if 'zone_id' in di:
                self._zoneid = di['zone_id']
            else:
                logger.error('zone id for domain ['+domain+'] could not be found')
        except Exception as e:
            logger.error('domain specified ['+domain+'] was invalid')

    # API version
    def version ( self ):
        return self._rpc.version.info(self._key)

    def apikey_check( self ):
        logger = self._logger

        try:
            self.version()
            return True
        except xmlrpclib.Fault as err:
            return False
        except xmlrpclib.ProtocolError as err:
            logger.error('protocol error: '+err.errcode+' '+err.errmsg)

    # Domain info
    def domain_info ( self ):
        cache = self._cache
        logger = self._logger

        if cache.has('domain.info'):
            data = cache.get('domain.info')
        else:
            logger.info('retrieving domain.info')
            data = self._rpc.domain.info(self._key, self._domain)
            cache.set('domain.info', data)

        return data

    def domain_check ( self ):
        try:
            self.domain_info()
            return True
        except xmlrpclib.Fault as err:
            return False

    # Zone
    def zone_list( self ):
        cache = self._cache
        logger = self._logger

        if cache.has('domain.zone.list'):
            data = cache.get('domain.zone.list')
        else:
            logger.info('retrieving domain.zone.list')
            data = self._rpc.domain.zone.list(self._key)
            cache.set('domain.zone.list', data)

        return data

    def zone_get_id ( self ):
        return self.domain_info()['zone_id']

    def zone_version_set ( self, zver ): # Set active version
        if zver:
            self._rpc.domain.zone.version.set(self._key, self._zoneid, zver)

    # Zone records
    def zone_record_list ( self, name = None, type = None ):
        opts = {}
        if name: opts['name'] = name
        if type: opts['type'] = type

        cache = self._cache
        logger = self._logger

        cacheKey = 'domain.zone.record.list?name='+name+'&type='+type
        if cache.has(cacheKey):
            data = cache.get(cacheKey)
        else:
            logger.info('retrieving '+cacheKey)
            data = self._rpc.domain.zone.record.list(self._key, self._zoneid, 0, opts)
            cache.set(cacheKey, data)

        return data

    def zone_record_check ( self, name, type, external_ip ):
        records = self.zone_record_list(name, type)
        if len(records) > 0:
            for record in records:
                if record['value'] == external_ip:
                    return False

        return True

    def zone_version_new ( self ): # Get new zone version
        return self._rpc.domain.zone.version.new(self._key, self._zoneid)

    def zone_record_delete ( self, zver, name, type ): # Delete a zone record
        opts = { 'name' : name, 'type' : type }
        self._rpc.domain.zone.record.delete(self._key, self._zoneid, zver, opts)

    def zone_record_insert ( self, zver, name, type, value, ttl ): # Insert a new record
        opts = { 'name' : name, 'type' : type, 'value' : value, 'ttl' : ttl }
        self._rpc.domain.zone.record.add(self._key, self._zoneid, zver, opts)

    def zone_record_update ( self, zver, name, type, value, ttl ): # Update a record
        self.zone_record_delete(zver, name, type)
        self.zone_record_insert(zver, name, type, value, ttl)

#
# Get public IP address
#

def get_public_ipv4():
    logger = Logger.get()

    try:
        return urllib2.urlopen('http://ipinfo.io/ip').read()
    except:
        logger.warn('failed to retrieve IPv4 from http://ipinfo.io/ip')
    try:
        return urllib2.urlopen('http://api.externalip.net/ip/').read()
    except:
        logger.warn('failed to retrieve IPv4 from http://api.externalip.net/ip/')
    try:
        data = urllib2.urlopen('http://checkip.dyndns.com/').read()
        matches = re.search('<body>Current IP Address: (.*?)</body>', data)
        if matches:
            return matches.group(1)
    except:
        logger.warn('failed to retrieve IPv4 from http://checkip.dyndns.com/')
    return None

def get_public_ipv6():
    logger = Logger.get()

    try:
        data = urllib2.urlopen("http://icanhazipv6.com").read()
        matches = re.search('<p class="my_address">(.*?)</p>', data)
        if matches:
            return matches.group(1)
    except:
        logger.warn('failed to retrieve IPv6 from http://icanhazipv6.com')
    return None

# Livebox v2 Sagem
def get_public_ipv4_orange_v2():
    logger = Logger.get()

    try:
        data = urllib2.urlopen("http://livebox/").read()

        matches = re.search('Adresse IP WAN :</td>[\s]+<td class="value">(.*?)</td>', data)
        if matches:
            return matches.group(1)
    except: pass

    logger.warn('failed to retrieve IPv4 from http://livebox/')
    return None

# Livebox v3 Sagem
# See http://communaute.orange.fr/t5/ma-connexion/Recup%C3%A9ration-de-l-IP-WAN-d-une-Livebox-Play-noire/td-p/226035
def get_public_ipv4_orange_v3():
    logger = Logger.get()

    host = 'livebox'
    path = '/sysbus/NMC:getWANStatus'
    reqData = '{"parameters":{}}'
    headers = { "Content-Type": "application/json" }

    try:
        h = httplib.HTTPConnection(host)
        h.request('POST', path, reqData, headers)
        r = h.getresponse()

        respData = json.loads(r.read())

        return respData['result']['data']['IPAddress']
        #return respData['result']['data']['IPv6Address'] # For ipv6
    except: pass

    logger.warn('failed to retrieve IPv4 from http://livebox/')
    return None

def get_public_ipv4_orange():
	# First try v3
	ip = get_public_ipv4_orange_v3()

	if ip is None: # Then v2
		ip = get_public_ipv4_orange_v2()

	return ip

#
# Caching
#

class GandiAPICache:
    def __init__ ( self, filepath, ttl ):
        self._filepath = filepath
        self._cache = None
        self._ttl = ttl
        self._logger = Logger.get()

    def read ( self ):
        logger = self._logger

        ttl = self._ttl

        if self._filepath is False:
            return self._cache

        if self._cache is None and os.path.isfile(self._filepath):
            if os.path.getmtime(self._filepath) + ttl < time.time():
                logger.info('flushing cache, TTL reached')
                self._cache = {}
            else:
                f = open(self._filepath, 'r')
                
                try:
                    self._cache = json.load(f)
                except: pass

        return self._cache

    def is_empty ( self ):
        return self.read() is None

    def write ( self, cache ):
        if self._filepath is not False:
            f = open(self._filepath, 'w+')
            json.dump(cache, f, skipkeys=True, cls=JsonObjectEncoder)

        self._cache = cache

    def flush (self ):
        self.write({})

    def has ( self, key ):
        if self.is_empty():
            return False

        return key in self.read()

    def get ( self, key ):
        if not self.has(key):
            return None

        return self.read()[key]

    def set ( self, key, value ):
        if self.is_empty():
            cache = {}
        else:
            cache = self.read()

        cache[key] = value
        self.write(cache)

class JsonObjectEncoder(json.JSONEncoder):
    def default(self, obj):
        if isinstance(obj, (list, dict, str, unicode, int, float, bool, type(None))):
            return json.JSONEncoder.default(self, obj)
        else:
            return str(obj)

#
# Main
#

if __name__ == '__main__':
    apikey = ''
    domain = ''
    record = ''
    provider = ''
    rtypes = []
    quiet = False
    test = False
    logger = Logger(quiet)

    # Process command line
    optp = OptionParser()
    optp.add_option('-a', '--api', help='Specify API key')
    optp.add_option('-d', '--domain', help='Specify domain')
    optp.add_option('-r', '--record', help='Specify record name')
    optp.add_option('-t', '--ttl', help='Specify record TTL. Defaults to 300s (5min)',
            type='int', default=300)
    optp.add_option('-4', '--ipv4', help='Enable IPv4',
            action='store_true')
    optp.add_option('-6', '--ipv6', help='Enable IPv6',
            action='store_true')
    optp.add_option('-p', '--provider', help='Specify your Internet provider name to retrieve faster your IP adress (supported: orange)')
    optp.add_option('--test', help='Run test, do not update anything',
            action='store_true')
    optp.add_option('--extip4', help='Force external IPv4. This can be used to update a record with an IP different than the IP of the server/workstation from which the script is executed')
    optp.add_option('--extip6', help='Force external IPv6. This can be used to update a record with an IP different than the IP of the server/workstation from which the script is executed')
    optp.add_option('-q', '--quiet', help='No output except to stderr on error', action='store_true')
    optp.add_option('-c', '--cache', help='Enable IP caching', action='store_true')
    optp.add_option('--cache-file', help='Set the file cache path. Defaults to gandi-dyndns-cache_DOMAIN.json', dest='cacheFile')
    optp.add_option('--cache-ttl', help='Set the cache timeout, in seconds. Defaults to 3600s (1h)', dest='cacheTtl', type='int', default=3600)
    (opts, args) = optp.parse_args()

    # Validate Options
    if not opts.api or not opts.domain or not opts.record:
        logger.error('you must specify -a -d and -r')

    # Process
    if opts.ipv4: rtypes.append('A')
    if opts.ipv6: rtypes.append('AAAA')
    domain = opts.domain
    apikey = opts.api
    record = opts.record
    ttl = opts.ttl
    provider = opts.provider
    extip4 = opts.extip4
    extip6 = opts.extip6
    if opts.test: test = True
    if opts.quiet: quiet = True

    # Setup api
    cacheFile = False
    cacheTtl = opts.cacheTtl
    if opts.cache: # Cache enabled
        if opts.cacheFile:
            cacheFile = opts.cacheFile
        else:
            cacheFile = 'gandi-dyndns_'+domain+'.json'

    cache = GandiAPICache(cacheFile, cacheTtl)

    api = GandiAPI(apikey, domain, cache)

    # Default
    if not rtypes:
        rtypes = ['A']

    # Test mode
    if test:
        logger.info('running in test mode, will not update records')

    # Process records
    addresses = {}
    for rtype in rtypes:
        if api.zone_record_list(record, rtype) == False:
            logger.error(rtype + " Record " + record + " does not exist")

        if rtype == 'A': # IPv4
            if extip4:
                address = extip4
            else:
                if provider in ['orange', 'orange_v2', 'orange_v3']:
                    if provider == 'orange':
                    	address = get_public_ipv4_orange()
                    elif provider == 'orange_v2':
                    	address = get_public_ipv4_orange_v2()
                    else:
                    	address = get_public_ipv4_orange_v3()

                    if address is None: # Fallback
                    	address = get_public_ipv4()
                else:
                    address = get_public_ipv4()
        elif rtype == 'AAAA': # IPv6
            if extip6:
                address = extip6
            else:
                address = get_public_ipv6()
        if not address:
            logger.error("Can't find address for record type '" + rtype + "'")
        addresses[rtype] = address

    # Fetch the active zone id
    zone_id = api.zone_get_id()
    
    # Check if the current IPv4 address changed
    for rtype in rtypes:
        ip_changed = api.zone_record_check(record, rtype, addresses[rtype])
        if not ip_changed:
            if not quiet:
                logger.info("the IP for '" + record + "' did not change")
            sys.exit(0)

    # Create a new zone version for zone id
    if test:
        zver = 12345
    else:
        zver = api.zone_version_new()

    if not quiet:
        logger.info('created a new zone file version '+str(zver))

    for rtype in rtypes:
        # Update the record for the zone id and zone version
        if not test:
            api.zone_record_update(zver, record, rtype, addresses[rtype], ttl)
        if not quiet:
            print('Updating record #'+record+':')
            print(' '+str(ttl)+' '+rtype+' '+addresses[rtype])

    # Activate the new zone
    if not test and zver:
        api.zone_version_set(zver)

    # Done
    logger.info('records updated')
